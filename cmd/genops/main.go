package main

import (
	"fmt"
	"io"
	"log"
	"os"
	"os/exec"
	"os/user"
	"path"
	"strings"

	"github.com/pkg/errors"
)

const genmsg = "// Code generated by genops, which is a ops generation tool for Gorgonia. DO NOT EDIT."

var (
	gopath, stdopsloc string
	stubsFilename     string
	stubsFile         io.WriteCloser
)

func init() {
	gopath = os.Getenv("GOPATH")
	if gopath == "" {
		usr, err := user.Current()
		if err != nil {
			log.Fatal(err)
		}
		gopath = path.Join(usr.HomeDir, "go")
		stat, err := os.Stat(gopath)
		if err != nil {
			log.Fatal(err)
		}
		if !stat.IsDir() {
			log.Fatal("You need to define a $GOPATH")
		}
	}
	stdopsloc = path.Join(gopath, "src/gorgonia.org/gorgonia/ops/std")
	stubsFilename = path.Join(stdopsloc, "stubs_generated.go")

	// handle stubsFile
	var err error
	if stubsFile, err = os.OpenFile(stubsFilename, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0644); err != nil {
		log.Fatal(err)
	}
	fmt.Fprintf(stubsFile, "package stdops\n\n%v\n\n", genmsg)
}

func goimports(filename string) error {
	cmd := exec.Command("goimports", "-w", filename)
	err := cmd.Run()
	if err != nil {
		return errors.Wrapf(err, "Unable to goimports %v", filename)
	}
	return nil
}

func generateAriths() error {
	for _, op := range ariths {
		filename := strings.ToLower(op.Name) + "_generated.go"
		p := path.Join(stdopsloc, filename)
		f, err := os.OpenFile(p, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0644)
		if err != nil {
			return err
		}
		fmt.Fprintf(f, "package stdops\n\n%v\n\n", genmsg)
		if err := binopTmpl.Execute(f, op); err != nil {
			return errors.Wrapf(err, "Unable to execute binopTmpl for %v", op.Name)
		}
		if err := f.Close(); err != nil {
			return errors.Wrapf(err, "Unable to close %v", p)
		}
		if err := goimports(p); err != nil {
			return err
		}

		// extra: write symdiff to stubs
		if err := binSymDiffTmpl.Execute(stubsFile, op); err != nil {
			return errors.Wrapf(err, "Unable to add %v SymDiff stubs", op.Name)
		}
	}
	for _, op := range arithTest {
		filename := strings.ToLower(op.Name) + "_generated_test.go"
		p := path.Join(stdopsloc, filename)
		f, err := os.OpenFile(p, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0644)
		if err != nil {
			return err
		}
		fmt.Fprintf(f, "package stdops\n\n%v\n\n", genmsg)
		if err := binopTestTmpl.Execute(f, op); err != nil {
			return errors.Wrapf(err, "Unable to execute binopTmpl for %v", op.Name)
		}
		if err := f.Close(); err != nil {
			return errors.Wrapf(err, "Unable to close %v", p)
		}
		if err := goimports(p); err != nil {
			return err
		}
	}
	return nil
}

func finishStubs() error {
	if err := stubsFile.Close(); err != nil {
		return err
	}
	return goimports(stubsFilename)
}

func main() {
	defer finishStubs()
	if err := generateAriths(); err != nil {
		log.Fatal(err)
	}
}

package stdops

import (
	"context"
	"runtime/trace"

	"gorgonia.org/gorgonia/values"
)

// Code generated by genops, which is a ops generation tool for Gorgonia. DO NOT EDIT.

// Gte is a tensor-tensor elementwise greater-than-or-equal-to.
type Gte struct {
	binop
	retSame bool
}

// String implements fmt.Stringer.
func (op Gte) String() string { return "≥" }

// Do performs elementwise greater-than-or-equal-to.
func (op Gte) Do(ctx context.Context, vs ...values.Value) (retVal values.Value, err error) {
	if err := handleCtx(ctx); err != nil {
		return nil, err
	}

	a := vs[0].(tensor.Tensor)
	b := vs[1].(tensor.Tensor)

	// Do the actual operation
	ctx2, task := trace.NewTask(ctx, op.String())
	if op.retSame {
		retVal, err = tensor.Gte(a, b, tensor.WithContext(ctx2), tensor.AsSame())
	} else {
		retVal, err = tensor.Gte(a, b, tensor.WithContext(ctx2))
	}
	task.End()
	return retVal, err
}

// PreallocDo performs elementwise greater-than-or-equal-to but with a preallocated return value.
// PreallocDo allows Gte to implement ops.PreallocOp.
func (op Gte) PreallocDo(ctx context.Context, prealloc values.Value, vs ...values.Value) (retVal values.Value, err error) {
	if err := handleCtx(ctx); err != nil {
		return nil, err
	}

	a := vs[0].(tensor.Tensor)
	b := vs[1].(tensor.Tensor)

	ctx2, task := trace.NewTask(ctx, op.String())
	if op.retSame {
		retVal, err = tensor.Gte(a, b, tensor.WithReuse(prealloc), tensor.WithContext(ctx2), tensor.AsSame())
	} else {
		retVal, err = tensor.Gte(a, b, tensor.WithReuse(prealloc), tensor.WithContext(ctx2))
	}
	task.End()
	return retVal, err
}

// GteVS is a tensor-scalar elementwise greater-than-or-equal-to.
type GteVS struct {
	binop
	retSame bool
}

// String implements fmt.Stringer.
func (op GteVS) String() string { return "≥·" }

// Do performs elementwise greater-than-or-equal-to.
func (op GteVS) Do(ctx context.Context, vs ...values.Value) (retVal values.Value, err error) {
	if err := handleCtx(ctx); err != nil {
		return nil, err
	}

	a := vs[0].(tensor.Tensor)
	b := vs[1].(tensor.Tensor)

	// Do the actual operation
	ctx2, task := trace.NewTask(ctx, op.String())
	if op.retSame {
		retVal, err = tensor.Gte(a, b, tensor.WithContext(ctx2), tensor.AsSame())
	} else {
		retVal, err = tensor.Gte(a, b, tensor.WithContext(ctx2))
	}
	task.End()
	return retVal, err
}

// PreallocDo performs elementwise greater-than-or-equal-to but with a preallocated return value.
// PreallocDo allows GteVS to implement ops.PreallocOp.
func (op GteVS) PreallocDo(ctx context.Context, prealloc values.Value, vs ...values.Value) (retVal values.Value, err error) {
	if err := handleCtx(ctx); err != nil {
		return nil, err
	}

	a := vs[0].(tensor.Tensor)
	b := vs[1].(tensor.Tensor)

	ctx2, task := trace.NewTask(ctx, op.String())
	if op.retSame {
		retVal, err = tensor.Gte(a, b, tensor.WithReuse(prealloc), tensor.WithContext(ctx2), tensor.AsSame())
	} else {
		retVal, err = tensor.Gte(a, b, tensor.WithReuse(prealloc), tensor.WithContext(ctx2))
	}
	task.End()
	return retVal, err
}

// GteSV is a scalar-tensor elementwise greater-than-or-equal-to.
type GteSV struct {
	binop
	retSame bool
}

// String implements fmt.Stringer.
func (op GteSV) String() string { return "·≥" }

// Do performs elementwise greater-than-or-equal-to.
func (op GteSV) Do(ctx context.Context, vs ...values.Value) (retVal values.Value, err error) {
	if err := handleCtx(ctx); err != nil {
		return nil, err
	}

	a := vs[0].(tensor.Tensor)
	b := vs[1].(tensor.Tensor)

	// Do the actual operation
	ctx2, task := trace.NewTask(ctx, op.String())
	if op.retSame {
		retVal, err = tensor.Gte(a, b, tensor.WithContext(ctx2), tensor.AsSame())
	} else {
		retVal, err = tensor.Gte(a, b, tensor.WithContext(ctx2))
	}
	task.End()
	return retVal, err
}

// PreallocDo performs elementwise greater-than-or-equal-to but with a preallocated return value.
// PreallocDo allows GteSV to implement ops.PreallocOp.
func (op GteSV) PreallocDo(ctx context.Context, prealloc values.Value, vs ...values.Value) (values.Value, error) {
	if err := handleCtx(ctx); err != nil {
		return nil, err
	}

	a := vs[0].(tensor.Tensor)
	b := vs[1].(tensor.Tensor)

	ctx2, task := trace.NewTask(ctx, op.String())
	if op.retSame {
		retVal, err = tensor.Gte(a, b, tensor.WithReuse(prealloc), tensor.WithContext(ctx2), tensor.AsSame())
	} else {
		retVal, err = tensor.Gte(a, b, tensor.WithReuse(prealloc), tensor.WithContext(ctx2))
	}
	task.End()
	return retVal, err
}

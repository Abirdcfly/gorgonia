package stdops

// Code generated by genops, which is a ops generation tool for Gorgonia. DO NOT EDIT.

import (
	"context"
	"runtime/trace"

	gcontext "gorgonia.org/gorgonia/internal/context"
	"gorgonia.org/gorgonia/values"
	"gorgonia.org/tensor"
)

// mulOp is the base op for elementwise multiplciatio=.
type mulOp struct{ binop }

// String implements fmt.Stringer.
func (op mulOp) String() string { return "*" }

// Do performs elementwise multiplciatio=.
func (op mulOp) Do(ctx context.Context, vs ...values.Value) (retVal values.Value, err error) {
	if err := gcontext.Handle(ctx); err != nil {
		return nil, err
	}

	a := vs[0].(tensor.Tensor)
	b := vs[1].(tensor.Tensor)

	ctx2, task := trace.NewTask(ctx, op.String())
	retVal, err = tensor.Mul(a, b, tensor.WithContext(ctx2))
	task.End()
	return retVal, err
}

// PreallocDo performs elementwise multiplciatio= but with a preallocated return value.
// PreallocDo allows mul to implement ops.PreallocOp.
func (op mulOp) PreallocDo(ctx context.Context, prealloc values.Value, vs ...values.Value) (retVal values.Value, err error) {
	if err := gcontext.Handle(ctx); err != nil {
		return nil, err
	}

	a := vs[0].(tensor.Tensor)
	b := vs[1].(tensor.Tensor)

	ctx2, task := trace.NewTask(ctx, op.String())
	retVal, err = tensor.Mul(a, b, tensor.WithReuse(prealloc), tensor.WithContext(ctx2))
	task.End()
	return retVal, err
}

// mulVV is a tensor-tensor elementwise multiplciatio=.
type mulVV struct {
	mulOp
	binopVV
}

// mulVS is a tensor-scalar elementwise multiplciatio=.
type mulVS struct {
	mulOp
	binopVS
}

// String implements fmt.Stringer.
func (op mulVS) String() string { return "*·" }

// mulSV is a scalar-tensor elementwise multiplciatio=.
type mulSV struct {
	mulOp
	binopSV
}

// String implements fmt.Stringer.
func (op mulSV) String() string { return "·*" }

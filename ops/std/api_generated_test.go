package stdops

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"gorgonia.org/gorgonia/ops"
	"gorgonia.org/tensor"
)

// Code generated by genops, which is a ops generation tool for Gorgonia. DO NOT EDIT.

func TestAdd(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Op

	// test vv
	a := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	b := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	op = Add(a, b)
	expected = addVV{addOp{}, binopVV{}}
	assert.Equal(op, expected)

	// test vs
	b = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Add(a, b)
	expected = addVS{addOp{}, binopVS{}}
	assert.Equal(op, expected)

	// test sv
	op = Add(b, a)
	expected = addSV{addOp{}, binopSV{}}
	assert.Equal(op, expected)

	// test ss
	a = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Add(a, b)
	expected = addVV{addOp{}, binopVV{}}
	assert.Equal(op, expected)

}

func TestSub(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Op

	// test vv
	a := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	b := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	op = Sub(a, b)
	expected = subVV{subOp{}, binopVV{}}
	assert.Equal(op, expected)

	// test vs
	b = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Sub(a, b)
	expected = subVS{subOp{}, binopVS{}}
	assert.Equal(op, expected)

	// test sv
	op = Sub(b, a)
	expected = subSV{subOp{}, binopSV{}}
	assert.Equal(op, expected)

	// test ss
	a = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Sub(a, b)
	expected = subVV{subOp{}, binopVV{}}
	assert.Equal(op, expected)

}

func TestMul(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Op

	// test vv
	a := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	b := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	op = Mul(a, b)
	expected = mulVV{mulOp{}, binopVV{}}
	assert.Equal(op, expected)

	// test vs
	b = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Mul(a, b)
	expected = mulVS{mulOp{}, binopVS{}}
	assert.Equal(op, expected)

	// test sv
	op = Mul(b, a)
	expected = mulSV{mulOp{}, binopSV{}}
	assert.Equal(op, expected)

	// test ss
	a = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Mul(a, b)
	expected = mulVV{mulOp{}, binopVV{}}
	assert.Equal(op, expected)

}

func TestDiv(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Op

	// test vv
	a := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	b := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	op = Div(a, b)
	expected = divVV{divOp{}, binopVV{}}
	assert.Equal(op, expected)

	// test vs
	b = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Div(a, b)
	expected = divVS{divOp{}, binopVS{}}
	assert.Equal(op, expected)

	// test sv
	op = Div(b, a)
	expected = divSV{divOp{}, binopSV{}}
	assert.Equal(op, expected)

	// test ss
	a = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Div(a, b)
	expected = divVV{divOp{}, binopVV{}}
	assert.Equal(op, expected)

}

func TestPow(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Op

	// test vv
	a := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	b := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	op = Pow(a, b)
	expected = powVV{powOp{}, binopVV{}}
	assert.Equal(op, expected)

	// test vs
	b = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Pow(a, b)
	expected = powVS{powOp{}, binopVS{}}
	assert.Equal(op, expected)

	// test sv
	op = Pow(b, a)
	expected = powSV{powOp{}, binopSV{}}
	assert.Equal(op, expected)

	// test ss
	a = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Pow(a, b)
	expected = powVV{powOp{}, binopVV{}}
	assert.Equal(op, expected)

}

func TestMod(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Op

	// test vv
	a := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	b := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	op = Mod(a, b)
	expected = modVV{modOp{}, binopVV{}}
	assert.Equal(op, expected)

	// test vs
	b = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Mod(a, b)
	expected = modVS{modOp{}, binopVS{}}
	assert.Equal(op, expected)

	// test sv
	op = Mod(b, a)
	expected = modSV{modOp{}, binopSV{}}
	assert.Equal(op, expected)

	// test ss
	a = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Mod(a, b)
	expected = modVV{modOp{}, binopVV{}}
	assert.Equal(op, expected)

}

func TestLt(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Op

	// test vv
	a := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	b := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	op = Lt(a, b, false)
	expected = ltVV{ltOp{retSame: false}, binopVV{}}
	assert.Equal(op, expected)

	// test vv but retSame = true
	op = Lt(a, b, true)
	expected = ltVV{ltOp{retSame: true}, binopVV{}}
	assert.Equal(op, expected)

	// test vs
	b = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Lt(a, b, false)
	expected = ltVS{ltOp{retSame: false}, binopVS{}}
	assert.Equal(op, expected)

	// test vs but retSame = true
	op = Lt(a, b, true)
	expected = ltVS{ltOp{retSame: true}, binopVS{}}
	assert.Equal(op, expected)

	// test sv
	op = Lt(b, a, false)
	expected = ltSV{ltOp{retSame: false}, binopSV{}}
	assert.Equal(op, expected)

	// test sv but retSame = true
	op = Lt(b, a, true)
	expected = ltSV{ltOp{retSame: true}, binopSV{}}
	assert.Equal(op, expected)

	// test ss
	a = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Lt(a, b, false)
	expected = ltVV{ltOp{retSame: false}, binopVV{}}
	assert.Equal(op, expected)

	// test ss but retSame = true
	op = Lt(a, b, true)
	expected = ltVV{ltOp{retSame: true}, binopVV{}}
	assert.Equal(op, expected)

}

func TestLte(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Op

	// test vv
	a := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	b := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	op = Lte(a, b, false)
	expected = lteVV{lteOp{retSame: false}, binopVV{}}
	assert.Equal(op, expected)

	// test vv but retSame = true
	op = Lte(a, b, true)
	expected = lteVV{lteOp{retSame: true}, binopVV{}}
	assert.Equal(op, expected)

	// test vs
	b = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Lte(a, b, false)
	expected = lteVS{lteOp{retSame: false}, binopVS{}}
	assert.Equal(op, expected)

	// test vs but retSame = true
	op = Lte(a, b, true)
	expected = lteVS{lteOp{retSame: true}, binopVS{}}
	assert.Equal(op, expected)

	// test sv
	op = Lte(b, a, false)
	expected = lteSV{lteOp{retSame: false}, binopSV{}}
	assert.Equal(op, expected)

	// test sv but retSame = true
	op = Lte(b, a, true)
	expected = lteSV{lteOp{retSame: true}, binopSV{}}
	assert.Equal(op, expected)

	// test ss
	a = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Lte(a, b, false)
	expected = lteVV{lteOp{retSame: false}, binopVV{}}
	assert.Equal(op, expected)

	// test ss but retSame = true
	op = Lte(a, b, true)
	expected = lteVV{lteOp{retSame: true}, binopVV{}}
	assert.Equal(op, expected)

}

func TestGt(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Op

	// test vv
	a := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	b := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	op = Gt(a, b, false)
	expected = gtVV{gtOp{retSame: false}, binopVV{}}
	assert.Equal(op, expected)

	// test vv but retSame = true
	op = Gt(a, b, true)
	expected = gtVV{gtOp{retSame: true}, binopVV{}}
	assert.Equal(op, expected)

	// test vs
	b = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Gt(a, b, false)
	expected = gtVS{gtOp{retSame: false}, binopVS{}}
	assert.Equal(op, expected)

	// test vs but retSame = true
	op = Gt(a, b, true)
	expected = gtVS{gtOp{retSame: true}, binopVS{}}
	assert.Equal(op, expected)

	// test sv
	op = Gt(b, a, false)
	expected = gtSV{gtOp{retSame: false}, binopSV{}}
	assert.Equal(op, expected)

	// test sv but retSame = true
	op = Gt(b, a, true)
	expected = gtSV{gtOp{retSame: true}, binopSV{}}
	assert.Equal(op, expected)

	// test ss
	a = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Gt(a, b, false)
	expected = gtVV{gtOp{retSame: false}, binopVV{}}
	assert.Equal(op, expected)

	// test ss but retSame = true
	op = Gt(a, b, true)
	expected = gtVV{gtOp{retSame: true}, binopVV{}}
	assert.Equal(op, expected)

}

func TestGte(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Op

	// test vv
	a := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	b := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	op = Gte(a, b, false)
	expected = gteVV{gteOp{retSame: false}, binopVV{}}
	assert.Equal(op, expected)

	// test vv but retSame = true
	op = Gte(a, b, true)
	expected = gteVV{gteOp{retSame: true}, binopVV{}}
	assert.Equal(op, expected)

	// test vs
	b = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Gte(a, b, false)
	expected = gteVS{gteOp{retSame: false}, binopVS{}}
	assert.Equal(op, expected)

	// test vs but retSame = true
	op = Gte(a, b, true)
	expected = gteVS{gteOp{retSame: true}, binopVS{}}
	assert.Equal(op, expected)

	// test sv
	op = Gte(b, a, false)
	expected = gteSV{gteOp{retSame: false}, binopSV{}}
	assert.Equal(op, expected)

	// test sv but retSame = true
	op = Gte(b, a, true)
	expected = gteSV{gteOp{retSame: true}, binopSV{}}
	assert.Equal(op, expected)

	// test ss
	a = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = Gte(a, b, false)
	expected = gteVV{gteOp{retSame: false}, binopVV{}}
	assert.Equal(op, expected)

	// test ss but retSame = true
	op = Gte(a, b, true)
	expected = gteVV{gteOp{retSame: true}, binopVV{}}
	assert.Equal(op, expected)

}

func TestElEq(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Op

	// test vv
	a := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	b := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	op = ElEq(a, b, false)
	expected = elEqVV{elEqOp{retSame: false}, binopVV{}}
	assert.Equal(op, expected)

	// test vv but retSame = true
	op = ElEq(a, b, true)
	expected = elEqVV{elEqOp{retSame: true}, binopVV{}}
	assert.Equal(op, expected)

	// test vs
	b = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = ElEq(a, b, false)
	expected = elEqVS{elEqOp{retSame: false}, binopVS{}}
	assert.Equal(op, expected)

	// test vs but retSame = true
	op = ElEq(a, b, true)
	expected = elEqVS{elEqOp{retSame: true}, binopVS{}}
	assert.Equal(op, expected)

	// test sv
	op = ElEq(b, a, false)
	expected = elEqSV{elEqOp{retSame: false}, binopSV{}}
	assert.Equal(op, expected)

	// test sv but retSame = true
	op = ElEq(b, a, true)
	expected = elEqSV{elEqOp{retSame: true}, binopSV{}}
	assert.Equal(op, expected)

	// test ss
	a = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = ElEq(a, b, false)
	expected = elEqVV{elEqOp{retSame: false}, binopVV{}}
	assert.Equal(op, expected)

	// test ss but retSame = true
	op = ElEq(a, b, true)
	expected = elEqVV{elEqOp{retSame: true}, binopVV{}}
	assert.Equal(op, expected)

}

func TestElNe(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Op

	// test vv
	a := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	b := tensor.New(tensor.WithShape(2, 3), tensor.Of(tensor.Float64))
	op = ElNe(a, b, false)
	expected = elNeVV{elNeOp{retSame: false}, binopVV{}}
	assert.Equal(op, expected)

	// test vv but retSame = true
	op = ElNe(a, b, true)
	expected = elNeVV{elNeOp{retSame: true}, binopVV{}}
	assert.Equal(op, expected)

	// test vs
	b = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = ElNe(a, b, false)
	expected = elNeVS{elNeOp{retSame: false}, binopVS{}}
	assert.Equal(op, expected)

	// test vs but retSame = true
	op = ElNe(a, b, true)
	expected = elNeVS{elNeOp{retSame: true}, binopVS{}}
	assert.Equal(op, expected)

	// test sv
	op = ElNe(b, a, false)
	expected = elNeSV{elNeOp{retSame: false}, binopSV{}}
	assert.Equal(op, expected)

	// test sv but retSame = true
	op = ElNe(b, a, true)
	expected = elNeSV{elNeOp{retSame: true}, binopSV{}}
	assert.Equal(op, expected)

	// test ss
	a = tensor.New(tensor.WithShape(), tensor.Of(tensor.Float64))
	op = ElNe(a, b, false)
	expected = elNeVV{elNeOp{retSame: false}, binopVV{}}
	assert.Equal(op, expected)

	// test ss but retSame = true
	op = ElNe(a, b, true)
	expected = elNeVV{elNeOp{retSame: true}, binopVV{}}
	assert.Equal(op, expected)

}

package stdops

import (
	"context"
	"runtime/trace"

	"gorgonia.org/gorgonia/values"
)

// Code generated by genops, which is a ops generation tool for Gorgonia. DO NOT EDIT.

// Lte is a tensor-tensor elementwise less-than-or-equal-to.
type Lte struct {
	binop
	retSame bool
}

// String implements fmt.Stringer.
func (op Lte) String() string { return "≤" }

// Do performs elementwise less-than-or-equal-to.
func (op Lte) Do(ctx context.Context, vs ...values.Value) (retVal values.Value, err error) {
	if err := handleCtx(ctx); err != nil {
		return nil, err
	}

	a := vs[0].(tensor.Tensor)
	b := vs[1].(tensor.Tensor)

	// Do the actual operation
	ctx2, task := trace.NewTask(ctx, op.String())
	if op.retSame {
		retVal, err = tensor.Lte(a, b, tensor.WithContext(ctx2), tensor.AsSame())
	} else {
		retVal, err = tensor.Lte(a, b, tensor.WithContext(ctx2))
	}
	task.End()
	return retVal, err
}

// PreallocDo performs elementwise less-than-or-equal-to but with a preallocated return value.
// PreallocDo allows Lte to implement ops.PreallocOp.
func (op Lte) PreallocDo(ctx context.Context, prealloc values.Value, vs ...values.Value) (retVal values.Value, err error) {
	if err := handleCtx(ctx); err != nil {
		return nil, err
	}

	a := vs[0].(tensor.Tensor)
	b := vs[1].(tensor.Tensor)

	ctx2, task := trace.NewTask(ctx, op.String())
	if op.retSame {
		retVal, err = tensor.Lte(a, b, tensor.WithReuse(prealloc), tensor.WithContext(ctx2), tensor.AsSame())
	} else {
		retVal, err = tensor.Lte(a, b, tensor.WithReuse(prealloc), tensor.WithContext(ctx2))
	}
	task.End()
	return retVal, err
}

// LteVS is a tensor-scalar elementwise less-than-or-equal-to.
type LteVS struct {
	binop
	retSame bool
}

// String implements fmt.Stringer.
func (op LteVS) String() string { return "≤·" }

// Do performs elementwise less-than-or-equal-to.
func (op LteVS) Do(ctx context.Context, vs ...values.Value) (retVal values.Value, err error) {
	if err := handleCtx(ctx); err != nil {
		return nil, err
	}

	a := vs[0].(tensor.Tensor)
	b := vs[1].(tensor.Tensor)

	// Do the actual operation
	ctx2, task := trace.NewTask(ctx, op.String())
	if op.retSame {
		retVal, err = tensor.Lte(a, b, tensor.WithContext(ctx2), tensor.AsSame())
	} else {
		retVal, err = tensor.Lte(a, b, tensor.WithContext(ctx2))
	}
	task.End()
	return retVal, err
}

// PreallocDo performs elementwise less-than-or-equal-to but with a preallocated return value.
// PreallocDo allows LteVS to implement ops.PreallocOp.
func (op LteVS) PreallocDo(ctx context.Context, prealloc values.Value, vs ...values.Value) (retVal values.Value, err error) {
	if err := handleCtx(ctx); err != nil {
		return nil, err
	}

	a := vs[0].(tensor.Tensor)
	b := vs[1].(tensor.Tensor)

	ctx2, task := trace.NewTask(ctx, op.String())
	if op.retSame {
		retVal, err = tensor.Lte(a, b, tensor.WithReuse(prealloc), tensor.WithContext(ctx2), tensor.AsSame())
	} else {
		retVal, err = tensor.Lte(a, b, tensor.WithReuse(prealloc), tensor.WithContext(ctx2))
	}
	task.End()
	return retVal, err
}

// LteSV is a scalar-tensor elementwise less-than-or-equal-to.
type LteSV struct {
	binop
	retSame bool
}

// String implements fmt.Stringer.
func (op LteSV) String() string { return "·≤" }

// Do performs elementwise less-than-or-equal-to.
func (op LteSV) Do(ctx context.Context, vs ...values.Value) (retVal values.Value, err error) {
	if err := handleCtx(ctx); err != nil {
		return nil, err
	}

	a := vs[0].(tensor.Tensor)
	b := vs[1].(tensor.Tensor)

	// Do the actual operation
	ctx2, task := trace.NewTask(ctx, op.String())
	if op.retSame {
		retVal, err = tensor.Lte(a, b, tensor.WithContext(ctx2), tensor.AsSame())
	} else {
		retVal, err = tensor.Lte(a, b, tensor.WithContext(ctx2))
	}
	task.End()
	return retVal, err
}

// PreallocDo performs elementwise less-than-or-equal-to but with a preallocated return value.
// PreallocDo allows LteSV to implement ops.PreallocOp.
func (op LteSV) PreallocDo(ctx context.Context, prealloc values.Value, vs ...values.Value) (values.Value, error) {
	if err := handleCtx(ctx); err != nil {
		return nil, err
	}

	a := vs[0].(tensor.Tensor)
	b := vs[1].(tensor.Tensor)

	ctx2, task := trace.NewTask(ctx, op.String())
	if op.retSame {
		retVal, err = tensor.Lte(a, b, tensor.WithReuse(prealloc), tensor.WithContext(ctx2), tensor.AsSame())
	} else {
		retVal, err = tensor.Lte(a, b, tensor.WithReuse(prealloc), tensor.WithContext(ctx2))
	}
	task.End()
	return retVal, err
}

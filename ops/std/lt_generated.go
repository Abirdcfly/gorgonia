package stdops

// Code generated by genops, which is a ops generation tool for Gorgonia. DO NOT EDIT.

import (
	"context"
	"runtime/trace"

	"github.com/chewxy/hm"
	gctx "gorgonia.org/gorgonia/internal/context"
	"gorgonia.org/gorgonia/types"
	"gorgonia.org/gorgonia/values"
	"gorgonia.org/tensor"
)

// ltOp is the base op for elementwise less-than.
type ltOp struct {
	binop
	retSame bool
}

// String implements fmt.Stringer.
func (op ltOp) String() string { return "<" }

// Do performs elementwise less-than.
func (op ltOp) Do(ctx context.Context, vs ...values.Value) (retVal values.Value, err error) {
	if err := gctx.Handle(ctx); err != nil {
		return nil, err
	}

	a := vs[0].(tensor.Tensor)
	b := vs[1].(tensor.Tensor)

	// Do the actual operation
	ctx2, task := trace.NewTask(ctx, op.String())
	if op.retSame {
		retVal, err = tensor.Lt(a, b, tensor.WithContext(ctx2), tensor.AsSameType())
	} else {
		retVal, err = tensor.Lt(a, b, tensor.WithContext(ctx2))
	}
	task.End()
	return retVal, err
}

// PreallocDo performs elementwise less-than but with a preallocated return value.
// PreallocDo allows lt to implement ops.PreallocOp.
func (op ltOp) PreallocDo(ctx context.Context, prealloc values.Value, vs ...values.Value) (retVal values.Value, err error) {
	if err := gctx.Handle(ctx); err != nil {
		return nil, err
	}

	a := vs[0].(tensor.Tensor)
	b := vs[1].(tensor.Tensor)

	ctx2, task := trace.NewTask(ctx, op.String())
	if op.retSame {
		retVal, err = tensor.Lt(a, b, tensor.WithReuse(prealloc), tensor.WithContext(ctx2), tensor.AsSameType())
	} else {
		retVal, err = tensor.Lt(a, b, tensor.WithReuse(prealloc), tensor.WithContext(ctx2))
	}
	task.End()
	return retVal, err
}                                         // DiffWRT returns {false, false} for lt
func (op ltOp) DiffWRT(inputs int) []bool { return twofalses }

// ltVV is a tensor-tensor elementwise less-than.
type ltVV struct {
	ltOp
	binopVV
}

// Type returns the type: (·) : a → a → a or (·) :  a → a → b
func (op ltVV) Type() hm.Type {
	a := hm.TypeVariable('a') // (T U) or U
	if op.retSame {
		return types.NewFunc(a, a, a)
	}
	b := types.MakeDependent(a, tensor.Bool) // (T Bool) or Bool
	return types.NewFunc(a, a, b)
}

// ltVS is a tensor-scalar elementwise less-than.
type ltVS struct {
	ltOp
	binopVS
}

// String implements fmt.Stringer.
func (op ltVS) String() string { return "<·" }

// Type returns the type: (·) : a → b → a or (·) :  a → b → c
func (op ltVS) Type() hm.Type {
	a := hm.TypeVariable('a') // (T U) or U
	b := hm.TypeVariable('b') // U
	if op.retSame {
		return types.NewFunc(a, b, a)
	}
	c := types.MakeDependent(a, tensor.Bool) // (T Bool) or Bool
	return types.NewFunc(a, b, c)
}

// ltSV is a scalar-tensor elementwise less-than.
type ltSV struct {
	ltOp
	binopSV
}

// String implements fmt.Stringer.
func (op ltSV) String() string { return "·<" }

// Type returns the type: (·) : a → b → b or (·) :  a → b → c
func (op ltSV) Type() hm.Type {
	a := hm.TypeVariable('a') // U
	b := hm.TypeVariable('b') // (T U) or U
	if op.retSame {
		return types.NewFunc(a, b, b)
	}
	c := types.MakeDependent(b, tensor.Bool) // (T Bool) or Bool
	return types.NewFunc(a, b, c)
}
